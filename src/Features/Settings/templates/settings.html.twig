{% extends 'layouts/base.html.twig' %}

{% block content %}
	<!-- BEGIN PAGE HEADER -->
	<div class="page-header d-print-none">
		<div class="container-xl">
			<div class="row g-2 align-items-center">
				<div class="col">
					<h2 class="page-title">Pengaturan</h2				</div>
			</div>
		</div>
	</div>
	<!-- END PAGE HEADER -->
	<!-- BEGIN PAGE BODY -->
	<div class="page-body">
		<div class="container-xl">
			<div class="card">
				<div class="row g-0">
					<div class="col-12 col-md-3 border-end">
						<div class="card-body">
							<h4 class="subheader">Pengaturan Bisnis</h4>
							<div class="list-group list-group-transparent" id="settings-tabs">
								<a href="#akun-saya-tab" class="list-group-item list-group-item-action d-flex align-items-center active" data-bs-toggle="tab">Akun Saya</a>
								<a href="#notifikasi-saya-tab" class="list-group-item list-group-item-action d-flex align-items-center" data-bs-toggle="tab">Notifikasi Saya</a>
								<a href="#visibilitas-akses-tab" class="list-group-item list-group-item-action d-flex align-items-center" data-bs-toggle="tab">Visibilitas & Akses</a>
								<a href="#paket-tab" class="list-group-item list-group-item-action d-flex align-items-center" data-bs-toggle="tab">Paket</a>
								<a href="#tagihan-tab" class="list-group-item list-group-item-action d-flex align-items-center" data-bs-toggle="tab">Tagihan & Faktur</a>
							</div>
							<h4 class="subheader mt-4">Pengalaman</h4>
							<div class="list-group list-group-transparent">
								<a href="#umpan-balik-tab" class="list-group-item list-group-item-action" data-bs-toggle="tab">Beri Umpan Balik</a>
							</div>
						</div>
					</div>
					<div class="col-12 col-md-9 d-flex flex-column">
						<form id="settings-form" action="/api/settings/update" method="post" class="d-flex flex-column flex-grow-1">
							<div class="card-body flex-grow-1">
								{% if error %}
									<div class="alert alert-danger" role="alert">
										{{ error }}
									</div>
								{% endif %}
								<div class="tab-content" id="settings-tab-content">
									<!-- Akun Saya Tab -->
									<div class="tab-pane fade show active" id="akun-saya-tab" role="tabpanel" aria-labelledby="akun-saya-nav">
										<h2 class="mb-4">Akun Saya</h2>
										<h3 class="card-title">Profil Bisnis</h3>
										<div class="row g-3">
											<div class="col-md">
												<div class="form-label">Nama Bisnis</div>
												<input type="text" name="business_name" class="form-control" value="{{ settingsMap.business_name | default('') }}">
											</div>
											<div class="col-md">
												<div class="form-label">Kurir Default</div>
												<select name="default_courier" class="form-select">
													<option value="">Pilih Kurir</option>
													{% for courier in active_couriers %}
														<option value="{{ courier.id }}" {{ courier.id == settingsMap.default_courier ? 'selected' : '' }}>{{ courier.nama }}</option>
													{% endfor %}
												</select>
											</div>
											<div class="col-md">
												<div class="form-label">Ongkir Default (Rp)</div>
												<input type="number" name="default_shipping_cost" class="form-control" value="{{ settingsMap.default_shipping_cost | default('5000') }}">
											</div>
										</div>
									</div>

									<!-- Notifikasi Saya Tab -->
									<div class="tab-pane fade" id="notifikasi-saya-tab" role="tabpanel" aria-labelledby="notifikasi-saya-nav">
										<h2 class="mb-4">Notifikasi Saya</h2>
										<h3 class="card-title">Email Notifikasi</h3>
										<p class="card-subtitle">Email ini akan digunakan untuk menerima notifikasi sistem.</p>
										<div>
											<div class="row g-2">
												<div class="col-auto">
													<input type="email" name="notification_email" class="form-control w-auto" value="{{ settingsMap.notification_email | default(userEmail) }}">
												</div>
											</div>
										</div>
									</div>

									<!-- Visibilitas & Akses Tab -->
									<div class="tab-pane fade" id="visibilitas-akses-tab" role="tabpanel" aria-labelledby="visibilitas-akses-nav">
										<h2 class="mb-4">Visibilitas & Akses</h2>
										<h3 class="card-title">Visibilitas Profil Publik</h3>
										<p class="card-subtitle">Mengaktifkan profil publik memungkinkan orang lain di jaringan melihat bisnis Anda.</p>
										<div>
											<label class="form-check form-switch form-switch-lg">
												<input class="form-check-input" type="checkbox" name="public_profile_visible" {{ settingsMap.public_profile_visible == 'true' ? 'checked' : '' }}>
												<span class="form-check-label form-check-label-on">Anda saat ini terlihat</span>
												<span class="form-check-label form-check-label-off">Anda saat ini tidak terlihat</span>
											</label>
										</div>
									</div>

									<!-- Paket Tab -->
									<div class="tab-pane fade" id="paket-tab" role="tabpanel" aria-labelledby="paket-nav">
										<div class="d-flex justify-content-between align-items-center mb-3">
											<h2 class="mb-0">Manajemen Paket</h2>
											<button type="button" class="btn btn-primary" id="addPaketBtn">
												Tambah Paket Baru
											</button>
										</div>

										{% if paket_error %}
											<div class="alert alert-danger" role="alert">
												Gagal memuat daftar paket: {{ paket_error }}
											</div>
										{% endif %}
										<div id="paketOperationalError" class="alert alert-danger" role="alert" style="display: none;"></div>


										<div class="table-responsive">
											<table class="table table-vcenter card-table table-striped" id="paketTable">
												<thead>
													<tr>
														<th>Nama Paket</th>
														<th>Deskripsi</th>
														<th>Harga Modal (Rp)</th>
														<th>Harga Jual (Rp)</th>
														<th>Urutan</th>
														<th class="w-1">Aksi</th>
													</tr>
												</thead>
												<tbody id="paketTableBody">
													{% if pakets is defined and pakets|length > 0 %}
														{% for paket in pakets %}
															<tr data-id="{{ paket.id }}">
																<td>{{ paket.nama }}</td>
																<td>{{ paket.deskripsi | default('-') }}</td>
																<td>{{ paket.harga_modal | number_format(0, ',', '.') }}</td>
																<td>{{ paket.harga_jual | number_format(0, ',', '.') }}</td>
																<td>{{ paket.urutan | default('-') }}</td>
																<td>
																	<div class="btn-list flex-nowrap">
																		<button class="btn btn-sm btn-outline-secondary editPaketBtn" data-id="{{ paket.id }}">Edit</button>
																		<button class="btn btn-sm btn-outline-danger deletePaketBtn" data-id="{{ paket.id }}">Hapus</button>
																	</div>
																</td>
															</tr>
														{% endfor %}
													{% else %}
														<tr>
															<td colspan="6" class="text-center">Belum ada paket yang ditambahkan.</td>
														</tr>
													{% endif %}
												</tbody>
											</table>
										</div>
									</div>

									<!-- Tagihan & Faktur Tab -->
									<div class="tab-pane fade" id="tagihan-tab" role="tabpanel" aria-labelledby="tagihan-nav">
										<h2 class="mb-4">Tagihan & Faktur</h2>
										<p>Pengaturan Tagihan & Faktur belum tersedia.</p>
									</div>

									<!-- Beri Umpan Balik Tab -->
									<div class="tab-pane fade" id="umpan-balik-tab" role="tabpanel" aria-labelledby="umpan-balik-nav">
										<h2 class="mb-4">Beri Umpan Balik</h2>
										<p>Fitur Beri Umpan Balik belum tersedia.</p>
									</div>
								</div>
							</div>
							<div class="card-footer bg-transparent mt-auto">
								<div class="btn-list justify-content-end">
									<a href="/dashboard" class="btn btn-1">Batal</a>
									<button type="submit" form="settings-form" class="btn btn-primary btn-2" id="save-settings-btn">Simpan</button>
								</div>
							</div>
						</form>
					</div>
				</div>
			</div>
		</div>
	</div>
	<!-- END PAGE BODY -->

	<!-- Toast Container -->
	<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100">
		<div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
			<div class="toast-header">
				<strong class="me-auto" id="toastTitle">Notification</strong>
				<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
			</div>
			<div class="toast-body" id="toastBody">
				<!-- Message will be inserted here -->
			</div>
		</div>
	</div>

	<!-- END PAGE BODY -->

	<!-- Paket Modal -->
	<div class="modal fade" id="paketModal" tabindex="-1" aria-labelledby="paketModalLabel" aria-hidden="true">
		<div class="modal-dialog modal-lg">
			<div class="modal-content">
				<form id="paketForm">
					<div class="modal-header">
						<h5 class="modal-title" id="paketModalLabel">Tambah Paket Baru</h5>
						<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
					</div>
					<div class="modal-body">
						<input type="hidden" id="paketId" name="id">
						<div id="paketFormError" class="alert alert-danger" style="display: none;" role="alert"></div>
						<div class="mb-3">
							<label for="paketNama" class="form-label">Nama Paket <span class="text-danger">*</span></label>
							<input type="text" class="form-control" id="paketNama" name="nama" required>
						</div>
						<div class="mb-3">
							<label for="paketDeskripsi" class="form-label">Deskripsi</label>
							<textarea class="form-control" id="paketDeskripsi" name="deskripsi" rows="3"></textarea>
						</div>
						<div class="row">
							<div class="col-md-6 mb-3">
								<label for="paketHargaModal" class="form-label">Harga Modal (Rp) <span class="text-danger">*</span></label>
								<input type="number" class="form-control" id="paketHargaModal" name="harga_modal" required step="any">
							</div>
							<div class="col-md-6 mb-3">
								<label for="paketHargaJual" class="form-label">Harga Jual (Rp) <span class="text-danger">*</span></label>
								<input type="number" class="form-control" id="paketHargaJual" name="harga_jual" required step="any">
							</div>
						</div>
						<div class="mb-3">
							<label for="paketUrutan" class="form-label">Urutan (Opsional)</label>
							<input type="number" class="form-control" id="paketUrutan" name="urutan" placeholder="Biarkan kosong untuk urutan otomatis/terakhir">
						</div>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Batal</button>
						<button type="submit" class="btn btn-primary" id="savePaketBtn">Simpan Paket</button>
					</div>
				</form>
			</div>
		</div>
	</div>
	<!-- END Paket Modal -->


	<!-- Toast Container -->
	<div class="toast-container position-fixed top-0 end-0 p-3" style="z-index: 1100">
		<div id="liveToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
			<div class="toast-header">
				<strong class="me-auto" id="toastTitle">Notification</strong>
				<button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
			</div>
			<div class="toast-body" id="toastBody">
				<!-- Message will be inserted here -->
			</div>
		</div>
	</div>

	<script type="module">
	import { showToast } from '/js/app/utils.js?v={{ 'now'|date('U') }}';

	document.getElementById('settings-form').addEventListener('submit', async (e) => {
	    e.preventDefault();
	    const form = e.target;
	    const formData = new FormData(form);
	    // const data = Object.fromEntries(formData); // Replaced with more robust handling below

		const data = {};
		formData.forEach((value, key) => {
			data[key] = value;
		});

		// Explicitly handle checkbox for public_profile_visible
		if (formData.has('public_profile_visible')) {
			data['public_profile_visible'] = 'true'; // Value when checked (can be 'on' or the actual value attribute)
		} else {
			data['public_profile_visible'] = 'false'; // Value when unchecked
		}

	    const saveButton = document.getElementById('save-settings-btn');
	    const originalButtonText = saveButton.innerHTML;
	    saveButton.disabled = true;
	    saveButton.innerHTML = 'Menyimpan... <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>';
	
	    try {
	        const response = await fetch(form.action, {
	            method: 'POST',
	            headers: {
	                'Content-Type': 'application/json',
	                'X-Requested-With': 'XMLHttpRequest'
	            },
	            body: JSON.stringify(data)
	        });
	        const result = await response.json();
	
	        if (result.success) {
	            showToast('Berhasil', 'Pengaturan berhasil disimpan', 'success');
	        } else {
	            showToast('Gagal', 'Gagal menyimpan pengaturan: ' + (result.message || 'Tidak ada pesan error spesifik.'), 'error');
	        }
	    } catch (error) {
	        console.error('Error submitting settings:', error);
	        showToast('Error', 'Terjadi kesalahan saat menyimpan pengaturan. Silakan coba lagi.', 'error');
	    } finally {
	        saveButton.disabled = false;
	        saveButton.innerHTML = originalButtonText;
	    }
	});

	// Paket Management్యా JavaScript
	document.addEventListener('DOMContentLoaded', () => {
		const paketModalElement = document.getElementById('paketModal');
		if (!paketModalElement) {
			console.error("Paket modal element not found!");
			return;
		}
		const paketModal = new bootstrap.Modal(paketModalElement);
		const paketForm = document.getElementById('paketForm');
		const paketTableBody = document.getElementById('paketTableBody');
		const addPaketBtn = document.getElementById('addPaketBtn');
		const paketFormError = document.getElementById('paketFormError');
		const paketOperationalError = document.getElementById('paketOperationalError');

		function displayPaketOpError(message) {
			if (paketOperationalError) {
				paketOperationalError.textContent = message;
				paketOperationalError.style.display = message ? 'block' : 'none';
			}
		}

		function displayPaketFormError(message) {
			if (paketFormError) {
				paketFormError.textContent = message;
				paketFormError.style.display = message ? 'block' : 'none';
			}
		}

		function renderPaketRow(paket) {
			const row = document.createElement('tr');
			row.setAttribute('data-id', paket.id);
			row.innerHTML = `
				<td>${paket.nama}</td>
				<td>${paket.deskripsi || '-'}</td>
				<td>${new Intl.NumberFormat('id-ID').format(paket.harga_modal)}</td>
				<td>${new Intl.NumberFormat('id-ID').format(paket.harga_jual)}</td>
				<td>${paket.urutan !== null && paket.urutan !== undefined ? paket.urutan : '-'}</td>
				<td>
					<div class="btn-list flex-nowrap">
						<button class="btn btn-sm btn-outline-secondary editPaketBtn" data-id="${paket.id}">Edit</button>
						<button class="btn btn-sm btn-outline-danger deletePaketBtn" data-id="${paket.id}">Hapus</button>
					</div>
				</td>
			`;
			return row;
		}

		async function refreshPaketTable() {
			displayPaketOpError(''); // Clear previous errors
			try {
				const response = await fetch('/api/pakets', {
					headers: { 'X-Requested-With': 'XMLHttpRequest' }
				});
				if (!response.ok) {
					const errorData = await response.json().catch(() => ({ message: 'Gagal memuat daftar paket.' }));
					throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
				}
				const result = await response.json();
				if (result.success && Array.isArray(result.data)) {
					paketTableBody.innerHTML = ''; // Clear existing rows
					if (result.data.length === 0) {
						paketTableBody.innerHTML = '<tr><td colspan="6" class="text-center">Belum ada paket yang ditambahkan.</td></tr>';
					} else {
						result.data.forEach(paket => {
							paketTableBody.appendChild(renderPaketRow(paket));
						});
					}
				} else {
					throw new Error(result.message || 'Format respons tidak sesuai saat memuat paket.');
				}
			} catch (error) {
				console.error('Error refreshing paket table:', error);
				showToast('Error', `Error memuat paket: ${error.message}`, 'error');
				displayPaketOpError(`Error memuat paket: ${error.message}`);
			}
		}

		async function handleEditPaket(paketId) {
			displayPaketFormError('');
			try {
				const response = await fetch(`/api/paket/${paketId}`, {
					headers: { 'X-Requested-With': 'XMLHttpRequest' }
				});
				if (!response.ok) {
					const errorData = await response.json().catch(() => ({ message: 'Gagal memuat data paket.' }));
					throw new Error(errorData.message || `HTTP error! status: ${response.status}`);
				}
				const result = await response.json();
				if (result.success && result.data) {
					document.getElementById('paketId').value = result.data.id;
					document.getElementById('paketNama').value = result.data.nama;
					document.getElementById('paketDeskripsi').value = result.data.deskripsi || '';
					document.getElementById('paketHargaModal').value = result.data.harga_modal;
					document.getElementById('paketHargaJual').value = result.data.harga_jual;
					document.getElementById('paketUrutan').value = result.data.urutan !== null ? result.data.urutan : '';
					document.getElementById('paketModalLabel').textContent = 'Edit Paket';
					paketModal.show();
				} else {
					throw new Error(result.message || 'Paket tidak ditemukan atau format data salah.');
				}
			} catch (error) {
				console.error('Error fetching paket for edit:', error);
				showToast('Error', `Error: ${error.message}`, 'error');
			}
		}

		async function handleDeletePaket(paketId, rowElement) {
			if (!confirm('Apakah Anda yakin ingin menghapus paket ini?')) {
				return;
			}
			try {
				const response = await fetch(`/api/paket/${paketId}/delete`, {
					method: 'DELETE',
					headers: { 'X-Requested-With': 'XMLHttpRequest' }
				});
				const result = await response.json();
				if (result.success) {
					showToast('Berhasil', 'Paket berhasil dihapus', 'success');
					if (rowElement) {
						rowElement.remove();
						if (paketTableBody.rows.length === 0) {
							paketTableBody.innerHTML = '<tr><td colspan="6" class="text-center">Belum ada paket yang ditambahkan.</td></tr>';
						}
					} else {
						refreshPaketTable(); // Fallback if rowElement is not passed
					}
				} else {
					throw new Error(result.message || 'Gagal menghapus paket.');
				}
			} catch (error) {
				console.error('Error deleting paket:', error);
				showToast('Error', `Error: ${error.message}`, 'error');
			}
		}

		if (addPaketBtn) {
			addPaketBtn.addEventListener('click', () => {
				displayPaketFormError('');
				paketForm.reset();
				document.getElementById('paketId').value = ''; // Ensure ID is cleared
				document.getElementById('paketModalLabel').textContent = 'Tambah Paket Baru';
				paketModal.show();
			});
		}

		if (paketForm) {
			paketForm.addEventListener('submit', async (e) => {
				e.preventDefault();
				displayPaketFormError('');
				const paketId = document.getElementById('paketId').value;
				const isEdit = !!paketId;
				const url = isEdit ? `/api/paket/${paketId}/update` : '/api/paket/add';
				const method = 'POST'; // Using POST for both create and update as per SlimPHP typical setup for form data

				const formData = new FormData(paketForm);
				const data = Object.fromEntries(formData.entries());

				// Ensure numeric values are correctly formatted if necessary, or let backend handle type coercion
				data.harga_modal = parseFloat(data.harga_modal) || 0;
				data.harga_jual = parseFloat(data.harga_jual) || 0;
				if (data.urutan === '' || data.urutan === undefined) {
                    // Send null if urutan is empty, so backend can handle it as null
                    data.urutan = null;
                } else {
                    data.urutan = parseInt(data.urutan, 10);
                }


				const savePaketBtn = document.getElementById('savePaketBtn');
				const originalButtonText = savePaketBtn.innerHTML;
				savePaketBtn.disabled = true;
				savePaketBtn.innerHTML = 'Menyimpan... <span class="spinner-border spinner-border-sm"></span>';

				try {
					const response = await fetch(url, {
						method: method,
						headers: {
							'Content-Type': 'application/json',
							'X-Requested-With': 'XMLHttpRequest'
						},
						body: JSON.stringify(data)
					});
					const result = await response.json();
					if (result.success) {
						paketModal.hide();
						showToast('Berhasil', result.message || (isEdit ? 'Paket berhasil diperbarui' : 'Paket berhasil ditambahkan'), 'success');
						// Check if the 'Paket' tab is active before refreshing
                        // This avoids unnecessary refreshes if another tab is active
                        // However, for simplicity and immediate feedback, always refresh if on settings page.
                        // If settings page itself is complex, consider more targeted updates.
                        const currentPakets = {{ pakets|json_encode|raw }};
                        if (currentPakets.length === 0 && !isEdit) { // If table was empty and added new
                             refreshPaketTable(); // Full refresh needed
                        } else if (isEdit) {
                            // Update existing row directly or full refresh
                            const rowToUpdate = paketTableBody.querySelector(`tr[data-id="${paketId}"]`);
                            if(rowToUpdate && result.data) {
                                const newRow = renderPaketRow(result.data);
                                rowToUpdate.parentNode.replaceChild(newRow, rowToUpdate);
                            } else {
                                refreshPaketTable();
                            }
                        } else if (!isEdit && result.data) { // Adding new
                             // Remove "empty" row if it exists
                            const emptyRow = paketTableBody.querySelector('td[colspan="6"]');
                            if (emptyRow) emptyRow.parentElement.remove();
                            paketTableBody.appendChild(renderPaketRow(result.data));
                        } else {
                           refreshPaketTable(); // Fallback full refresh
                        }

					} else {
						displayPaketFormError(result.message || 'Terjadi kesalahan.');
						// No toast here, error is in modal
					}
				} catch (error) {
					console.error('Error submitting paket form:', error);
					displayPaketFormError('Tidak dapat terhubung ke server. Silakan coba lagi.');
					// No toast here, error is in modal
				} finally {
					savePaketBtn.disabled = false;
					savePaketBtn.innerHTML = originalButtonText;
				}
			});
		}

		if (paketTableBody) {
			paketTableBody.addEventListener('click', (e) => {
				if (e.target.classList.contains('editPaketBtn')) {
					const paketId = e.target.dataset.id;
					handleEditPaket(paketId);
				} else if (e.target.classList.contains('deletePaketBtn')) {
					const paketId = e.target.dataset.id;
					const rowElement = e.target.closest('tr');
					handleDeletePaket(paketId, rowElement);
				}
			});
            // Initial rendering if pakets are passed directly and not empty (handled by Twig)
            // If relying purely on JS for initial load (e.g. if 'pakets' var not available to JS directly for comparison)
            // then call refreshPaketTable() here if the tab is active.
            // For now, Twig handles initial render. This JS is for dynamic updates.
		}

        // If the Paket tab is active on page load, and initial rendering was done by Twig,
        // ensure action listeners are attached.
        // However, the event delegation on paketTableBody handles dynamically added rows too.
        // So, direct call to attachPaketActionListeners might be redundant IF initial render is empty
        // and then populated by refreshPaketTable().
        // Given Twig renders initial rows, listeners should be active due to event delegation.
        // console.log("Paket management JS initialized.");

	});
	</script>
{% endblock %}
